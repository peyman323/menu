'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _isNode = require('is-node');

var _isNode2 = _interopRequireDefault(_isNode);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _liveCaller = require('live-caller');

var _logCallsite = require('./logCallsite');

var _logCallsite2 = _interopRequireDefault(_logCallsite);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//region Imports
var Debug = require('debug');
//import stackinfo from 'stackinfo'

//endregion

// Uncomment to track to spurious console.log calls.
//logCallsite.hookConsoleLog()

var Logger = function () {
  function Logger() {
    var ns = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    (0, _classCallCheck3.default)(this, Logger);
    this.ns = '';

    this.ns = ns;
    this.logger = Debug(ns);
    //this.logger.log = console.log.apply(console, arguments)
    //this.logger = console.log
  }

  (0, _createClass3.default)(Logger, [{
    key: 'log',
    value: function log() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      //const callInfo = callsite()
      this.logger.apply(this.debugModule, args);
      return this;
    }
  }, {
    key: 'debug',
    value: function debug() {
      var callInfo = (0, _liveCaller.getCallerFile)();

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.logger.apply(this.debugModule, args);
      if (callInfo) {
        this.logger.apply(this.debugModule, ['  ' + _chalk2.default.gray((0, _liveCaller.makeIDELink)(callInfo))]);
      }
      return this;
    }
  }, {
    key: 'error',
    value: function error() {
      var _console;

      (_console = console).error.apply(_console, arguments);
      return this;
    }
  }, {
    key: 'warn',
    value: function warn() {
      var _console2;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_console2 = console).warn.apply(_console2, ['WARNING:'].concat(args));
      return this;
    }
  }]);
  return Logger;
}();

var Decorators = function Decorators() {
  (0, _classCallCheck3.default)(this, Decorators);
};

// Main export.

var makeLogger = function makeLogger(ns) {
  var logger = new Logger(ns);
  logger.log = logger.log.bind(logger);
  logger.debug = logger.debug.bind(logger);
  logger.warn = logger.warn.bind(logger);
  logger.error = logger.error.bind(logger);
  return logger;
};

// For convenience without having to instantiate a logger using `new` (e.g. `import log from 'live-log`)
// we create a singleton instance of the logger.

var main = makeLogger;

var singleton = new Logger();

main.log = singleton.log.bind(singleton);
main.debug = singleton.debug.bind(singleton);
main.warn = singleton.warn.bind(singleton);
main.error = singleton.error.bind(singleton);

module.exports = main;

// TODO: Maybe don't cache the logger so it creates an instance each time
//  and uses the callsite to get the name of the module.
//# sourceMappingURL=index.js.map
