'use strict';

// Start timing server startup time asap.
global.liveStartTime = new Date();

var _require = require('live-log')('live');

var log = _require.log;

log('Starting Live app...');

//region Imports
var _ = require('lodash');

var _require2 = require('configurize');

var config = _require2.config;
//endregion

function getOpts(opts) {
  return _.defaults(opts, {
    moduleDirectories: config.get('live.moduleDirectories', []),
    globals: _.get(config, 'live.globals', {}),
    configurePromises: true
  });
}

////////////////////////////////////////////////////////////////////////////////

module.exports = function () {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  opts = getOpts(opts);

  ////////////////////////////////////////////////////////////////////////////////
  // Promises
  ////////////////////////////////////////////////////////////////////////////////

  if (__CLIENT__ && opts.configurePromises) require('./promises')();

  //////////////////////////////////////////////////////////////////////////////
  // NODE_PATH
  //////////////////////////////////////////////////////////////////////////////

  if (!__CLIENT__) {
    (function () {
      var addPath = require('app-module-path').addPath;
      opts.moduleDirectories.map(function (dir) {
        addPath(dir);
      });
    })();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Module aliases
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr)

  // Globals
  //////////////////////////////////////////////////////////////////////////////

  if (__CLIENT__) {
    // NOTE: In webpack config if `node.global = 'window'` then `window` will also be `global`.
    _(opts.globals).forEach(function (v, k) {
      window[k] = v;
    });
  } else {
    _(opts.globals).forEach(function (v, k) {
      global[k] = v;
    });
  }

  // TODO(vjpr)

  //////////////////////////////////////////////////////////////////////////////
  // Skip style requires when server side.
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr): Use style collector and serve css.
  if (!__CLIENT__) require.extensions['.less'] = function () {
    return null;
  };
  if (!__CLIENT__) require.extensions['.css'] = function () {
    return null;
  };

  //////////////////////////////////////////////////////////////////////////////
  // Unhandled promises
  //////////////////////////////////////////////////////////////////////////////

  // Capture unhandler promise rejections.
  // NOTE: Requires io.js or core-js.
  process.on('unhandledRejection', function (e, promise) {
    console.log(e.stack);
  });
  // TODO: Fire rejection events in the browser.
  // See: https://github.com/petkaantonov/bluebird/blob/master/API.md#global-rejection-events

  //////////////////////////////////////////////////////////////////////////////
  // Babel
  //////////////////////////////////////////////////////////////////////////////

  if (!__CLIENT__ && !global.__LIVE_DISABLE_BABEL__) {
    require('./roadrunner');
    require('babel-register')(_.clone(opts.babel));
    require('babel-polyfill');
  }

  // Enable to save cached roadrunner after server starts and *most* of the dependencies
  // have been loaded.
  //require('./roadrunner').saveRequireResolveCache()
};
//# sourceMappingURL=index.js.map
